// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	helperstruct "github.com/ECOMMERCE_PROJECT/pkg/common/helperstruct"
	response "github.com/ECOMMERCE_PROJECT/pkg/common/response"
	domain "github.com/ECOMMERCE_PROJECT/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserRepository) AddAddress(id int, address helperstruct.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", id, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserRepositoryMockRecorder) AddAddress(id, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserRepository)(nil).AddAddress), id, address)
}

// FindPassword mocks base method.
func (m *MockUserRepository) FindPassword(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPassword", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPassword indicates an expected call of FindPassword.
func (mr *MockUserRepositoryMockRecorder) FindPassword(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPassword", reflect.TypeOf((*MockUserRepository)(nil).FindPassword), id)
}

// IsSignIn mocks base method.
func (m *MockUserRepository) IsSignIn(phno string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSignIn", phno)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSignIn indicates an expected call of IsSignIn.
func (mr *MockUserRepositoryMockRecorder) IsSignIn(phno interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSignIn", reflect.TypeOf((*MockUserRepository)(nil).IsSignIn), phno)
}

// StoreOTP mocks base method.
func (m *MockUserRepository) StoreOTP(userEmail, otp string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOTP", userEmail, otp)
	ret0, _ := ret[0].(bool)
	return ret0
}

// StoreOTP indicates an expected call of StoreOTP.
func (mr *MockUserRepositoryMockRecorder) StoreOTP(userEmail, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOTP", reflect.TypeOf((*MockUserRepository)(nil).StoreOTP), userEmail, otp)
}

// UpdateAddress mocks base method.
func (m *MockUserRepository) UpdateAddress(id, addressId int, address helperstruct.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", id, addressId, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserRepositoryMockRecorder) UpdateAddress(id, addressId, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserRepository)(nil).UpdateAddress), id, addressId, address)
}

// UpdatePassword mocks base method.
func (m *MockUserRepository) UpdatePassword(id int, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", id, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepositoryMockRecorder) UpdatePassword(id, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepository)(nil).UpdatePassword), id, newPassword)
}

// UpdateProfile mocks base method.
func (m *MockUserRepository) UpdateProfile(id int, updatedetails helperstruct.UserReq) (response.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", id, updatedetails)
	ret0, _ := ret[0].(response.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserRepositoryMockRecorder) UpdateProfile(id, updatedetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserRepository)(nil).UpdateProfile), id, updatedetails)
}

// UserLogin mocks base method.
func (m *MockUserRepository) UserLogin(ctx context.Context, email string) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, email)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserRepositoryMockRecorder) UserLogin(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserRepository)(nil).UserLogin), ctx, email)
}

// UserSignUp mocks base method.
func (m *MockUserRepository) UserSignUp(ctx context.Context, user helperstruct.UserReq) (response.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", ctx, user)
	ret0, _ := ret[0].(response.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockUserRepositoryMockRecorder) UserSignUp(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockUserRepository)(nil).UserSignUp), ctx, user)
}

// VerifyOTP mocks base method.
func (m *MockUserRepository) VerifyOTP(otp string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", otp)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockUserRepositoryMockRecorder) VerifyOTP(otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockUserRepository)(nil).VerifyOTP), otp)
}

// ViewProfile mocks base method.
func (m *MockUserRepository) ViewProfile(id int) (response.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewProfile", id)
	ret0, _ := ret[0].(response.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewProfile indicates an expected call of ViewProfile.
func (mr *MockUserRepositoryMockRecorder) ViewProfile(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewProfile", reflect.TypeOf((*MockUserRepository)(nil).ViewProfile), id)
}
